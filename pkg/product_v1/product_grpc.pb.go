// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.0
// source: product.proto

package product_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ProductV1Client is the client API for ProductV1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProductV1Client interface {
	CreateProduct(ctx context.Context, in *CreateProductRequest, opts ...grpc.CallOption) (*CreateProductResponse, error)
	CreateCategory(ctx context.Context, in *CreateCategoryRequest, opts ...grpc.CallOption) (*CreateCategoryResponse, error)
	GetSingleProduct(ctx context.Context, in *GetSingleProductRequest, opts ...grpc.CallOption) (*GetSingleProductResponse, error)
	GetAllProducts(ctx context.Context, in *GetAllProductsRequest, opts ...grpc.CallOption) (*GetAllProductsResponse, error)
	GetAllProductsByCategory(ctx context.Context, in *GetAllProductsByCategoryRequest, opts ...grpc.CallOption) (*GetAllProductsResponse, error)
	GetAllCategories(ctx context.Context, in *GetAllCategoriesRequest, opts ...grpc.CallOption) (*GetAllCategoriesResponse, error)
}

type productV1Client struct {
	cc grpc.ClientConnInterface
}

func NewProductV1Client(cc grpc.ClientConnInterface) ProductV1Client {
	return &productV1Client{cc}
}

func (c *productV1Client) CreateProduct(ctx context.Context, in *CreateProductRequest, opts ...grpc.CallOption) (*CreateProductResponse, error) {
	out := new(CreateProductResponse)
	err := c.cc.Invoke(ctx, "/product_v1.ProductV1/CreateProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productV1Client) CreateCategory(ctx context.Context, in *CreateCategoryRequest, opts ...grpc.CallOption) (*CreateCategoryResponse, error) {
	out := new(CreateCategoryResponse)
	err := c.cc.Invoke(ctx, "/product_v1.ProductV1/CreateCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productV1Client) GetSingleProduct(ctx context.Context, in *GetSingleProductRequest, opts ...grpc.CallOption) (*GetSingleProductResponse, error) {
	out := new(GetSingleProductResponse)
	err := c.cc.Invoke(ctx, "/product_v1.ProductV1/GetSingleProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productV1Client) GetAllProducts(ctx context.Context, in *GetAllProductsRequest, opts ...grpc.CallOption) (*GetAllProductsResponse, error) {
	out := new(GetAllProductsResponse)
	err := c.cc.Invoke(ctx, "/product_v1.ProductV1/GetAllProducts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productV1Client) GetAllProductsByCategory(ctx context.Context, in *GetAllProductsByCategoryRequest, opts ...grpc.CallOption) (*GetAllProductsResponse, error) {
	out := new(GetAllProductsResponse)
	err := c.cc.Invoke(ctx, "/product_v1.ProductV1/GetAllProductsByCategory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productV1Client) GetAllCategories(ctx context.Context, in *GetAllCategoriesRequest, opts ...grpc.CallOption) (*GetAllCategoriesResponse, error) {
	out := new(GetAllCategoriesResponse)
	err := c.cc.Invoke(ctx, "/product_v1.ProductV1/GetAllCategories", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProductV1Server is the server API for ProductV1 service.
// All implementations must embed UnimplementedProductV1Server
// for forward compatibility
type ProductV1Server interface {
	CreateProduct(context.Context, *CreateProductRequest) (*CreateProductResponse, error)
	CreateCategory(context.Context, *CreateCategoryRequest) (*CreateCategoryResponse, error)
	GetSingleProduct(context.Context, *GetSingleProductRequest) (*GetSingleProductResponse, error)
	GetAllProducts(context.Context, *GetAllProductsRequest) (*GetAllProductsResponse, error)
	GetAllProductsByCategory(context.Context, *GetAllProductsByCategoryRequest) (*GetAllProductsResponse, error)
	GetAllCategories(context.Context, *GetAllCategoriesRequest) (*GetAllCategoriesResponse, error)
	mustEmbedUnimplementedProductV1Server()
}

// UnimplementedProductV1Server must be embedded to have forward compatible implementations.
type UnimplementedProductV1Server struct {
}

func (UnimplementedProductV1Server) CreateProduct(context.Context, *CreateProductRequest) (*CreateProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateProduct not implemented")
}
func (UnimplementedProductV1Server) CreateCategory(context.Context, *CreateCategoryRequest) (*CreateCategoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCategory not implemented")
}
func (UnimplementedProductV1Server) GetSingleProduct(context.Context, *GetSingleProductRequest) (*GetSingleProductResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSingleProduct not implemented")
}
func (UnimplementedProductV1Server) GetAllProducts(context.Context, *GetAllProductsRequest) (*GetAllProductsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllProducts not implemented")
}
func (UnimplementedProductV1Server) GetAllProductsByCategory(context.Context, *GetAllProductsByCategoryRequest) (*GetAllProductsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllProductsByCategory not implemented")
}
func (UnimplementedProductV1Server) GetAllCategories(context.Context, *GetAllCategoriesRequest) (*GetAllCategoriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllCategories not implemented")
}
func (UnimplementedProductV1Server) mustEmbedUnimplementedProductV1Server() {}

// UnsafeProductV1Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProductV1Server will
// result in compilation errors.
type UnsafeProductV1Server interface {
	mustEmbedUnimplementedProductV1Server()
}

func RegisterProductV1Server(s grpc.ServiceRegistrar, srv ProductV1Server) {
	s.RegisterService(&ProductV1_ServiceDesc, srv)
}

func _ProductV1_CreateProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductV1Server).CreateProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product_v1.ProductV1/CreateProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductV1Server).CreateProduct(ctx, req.(*CreateProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductV1_CreateCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductV1Server).CreateCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product_v1.ProductV1/CreateCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductV1Server).CreateCategory(ctx, req.(*CreateCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductV1_GetSingleProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSingleProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductV1Server).GetSingleProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product_v1.ProductV1/GetSingleProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductV1Server).GetSingleProduct(ctx, req.(*GetSingleProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductV1_GetAllProducts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllProductsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductV1Server).GetAllProducts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product_v1.ProductV1/GetAllProducts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductV1Server).GetAllProducts(ctx, req.(*GetAllProductsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductV1_GetAllProductsByCategory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllProductsByCategoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductV1Server).GetAllProductsByCategory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product_v1.ProductV1/GetAllProductsByCategory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductV1Server).GetAllProductsByCategory(ctx, req.(*GetAllProductsByCategoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductV1_GetAllCategories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllCategoriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductV1Server).GetAllCategories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/product_v1.ProductV1/GetAllCategories",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductV1Server).GetAllCategories(ctx, req.(*GetAllCategoriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProductV1_ServiceDesc is the grpc.ServiceDesc for ProductV1 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProductV1_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "product_v1.ProductV1",
	HandlerType: (*ProductV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateProduct",
			Handler:    _ProductV1_CreateProduct_Handler,
		},
		{
			MethodName: "CreateCategory",
			Handler:    _ProductV1_CreateCategory_Handler,
		},
		{
			MethodName: "GetSingleProduct",
			Handler:    _ProductV1_GetSingleProduct_Handler,
		},
		{
			MethodName: "GetAllProducts",
			Handler:    _ProductV1_GetAllProducts_Handler,
		},
		{
			MethodName: "GetAllProductsByCategory",
			Handler:    _ProductV1_GetAllProductsByCategory_Handler,
		},
		{
			MethodName: "GetAllCategories",
			Handler:    _ProductV1_GetAllCategories_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "product.proto",
}
