// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go
//
// Generated by this command:
//
//	mockgen -source repository.go -destination mocks/product_repo.go
//
// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	reflect "reflect"

	model "github.com/milkfrogge/coffee-store/internal/model"
	gomock "go.uber.org/mock/gomock"
)

// MockProductRepository is a mock of ProductRepository interface.
type MockProductRepository struct {
	ctrl     *gomock.Controller
	recorder *MockProductRepositoryMockRecorder
}

// MockProductRepositoryMockRecorder is the mock recorder for MockProductRepository.
type MockProductRepositoryMockRecorder struct {
	mock *MockProductRepository
}

// NewMockProductRepository creates a new mock instance.
func NewMockProductRepository(ctrl *gomock.Controller) *MockProductRepository {
	mock := &MockProductRepository{ctrl: ctrl}
	mock.recorder = &MockProductRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProductRepository) EXPECT() *MockProductRepositoryMockRecorder {
	return m.recorder
}

// CreateCategory mocks base method.
func (m *MockProductRepository) CreateCategory(ctx context.Context, category model.CreateCategoryDTO) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCategory", ctx, category)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCategory indicates an expected call of CreateCategory.
func (mr *MockProductRepositoryMockRecorder) CreateCategory(ctx, category any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCategory", reflect.TypeOf((*MockProductRepository)(nil).CreateCategory), ctx, category)
}

// CreateProduct mocks base method.
func (m *MockProductRepository) CreateProduct(ctx context.Context, product model.CreateProductDTO) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProduct", ctx, product)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProduct indicates an expected call of CreateProduct.
func (mr *MockProductRepositoryMockRecorder) CreateProduct(ctx, product any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProduct", reflect.TypeOf((*MockProductRepository)(nil).CreateProduct), ctx, product)
}

// DeleteCategory mocks base method.
func (m *MockProductRepository) DeleteCategory(ctx context.Context, categoryId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCategory", ctx, categoryId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCategory indicates an expected call of DeleteCategory.
func (mr *MockProductRepositoryMockRecorder) DeleteCategory(ctx, categoryId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCategory", reflect.TypeOf((*MockProductRepository)(nil).DeleteCategory), ctx, categoryId)
}

// DeleteProduct mocks base method.
func (m *MockProductRepository) DeleteProduct(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProduct", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProduct indicates an expected call of DeleteProduct.
func (mr *MockProductRepositoryMockRecorder) DeleteProduct(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProduct", reflect.TypeOf((*MockProductRepository)(nil).DeleteProduct), ctx, id)
}

// FindAllCategories mocks base method.
func (m *MockProductRepository) FindAllCategories(ctx context.Context) ([]model.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllCategories", ctx)
	ret0, _ := ret[0].([]model.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllCategories indicates an expected call of FindAllCategories.
func (mr *MockProductRepositoryMockRecorder) FindAllCategories(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllCategories", reflect.TypeOf((*MockProductRepository)(nil).FindAllCategories), ctx)
}

// FindAllProducts mocks base method.
func (m *MockProductRepository) FindAllProducts(ctx context.Context) ([]model.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllProducts", ctx)
	ret0, _ := ret[0].([]model.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllProducts indicates an expected call of FindAllProducts.
func (mr *MockProductRepositoryMockRecorder) FindAllProducts(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllProducts", reflect.TypeOf((*MockProductRepository)(nil).FindAllProducts), ctx)
}

// FindOneProduct mocks base method.
func (m *MockProductRepository) FindOneProduct(ctx context.Context, id string) (model.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOneProduct", ctx, id)
	ret0, _ := ret[0].(model.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOneProduct indicates an expected call of FindOneProduct.
func (mr *MockProductRepositoryMockRecorder) FindOneProduct(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOneProduct", reflect.TypeOf((*MockProductRepository)(nil).FindOneProduct), ctx, id)
}

// FindProductsByCategory mocks base method.
func (m *MockProductRepository) FindProductsByCategory(ctx context.Context, categoryId string, limit, offset uint32, sort string) ([]model.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindProductsByCategory", ctx, categoryId, limit, offset, sort)
	ret0, _ := ret[0].([]model.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindProductsByCategory indicates an expected call of FindProductsByCategory.
func (mr *MockProductRepositoryMockRecorder) FindProductsByCategory(ctx, categoryId, limit, offset, sort any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindProductsByCategory", reflect.TypeOf((*MockProductRepository)(nil).FindProductsByCategory), ctx, categoryId, limit, offset, sort)
}

// UpdateCategory mocks base method.
func (m *MockProductRepository) UpdateCategory(ctx context.Context, category model.Category) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCategory", ctx, category)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCategory indicates an expected call of UpdateCategory.
func (mr *MockProductRepositoryMockRecorder) UpdateCategory(ctx, category any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCategory", reflect.TypeOf((*MockProductRepository)(nil).UpdateCategory), ctx, category)
}

// UpdateCountOfProduct mocks base method.
func (m *MockProductRepository) UpdateCountOfProduct(ctx context.Context, id string, count uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCountOfProduct", ctx, id, count)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCountOfProduct indicates an expected call of UpdateCountOfProduct.
func (mr *MockProductRepositoryMockRecorder) UpdateCountOfProduct(ctx, id, count any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCountOfProduct", reflect.TypeOf((*MockProductRepository)(nil).UpdateCountOfProduct), ctx, id, count)
}

// UpdateManyCountsOfProduct mocks base method.
func (m *MockProductRepository) UpdateManyCountsOfProduct(ctx context.Context, products map[string]uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateManyCountsOfProduct", ctx, products)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateManyCountsOfProduct indicates an expected call of UpdateManyCountsOfProduct.
func (mr *MockProductRepositoryMockRecorder) UpdateManyCountsOfProduct(ctx, products any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateManyCountsOfProduct", reflect.TypeOf((*MockProductRepository)(nil).UpdateManyCountsOfProduct), ctx, products)
}

// UpdateProduct mocks base method.
func (m *MockProductRepository) UpdateProduct(ctx context.Context, product model.Product) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProduct", ctx, product)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateProduct indicates an expected call of UpdateProduct.
func (mr *MockProductRepositoryMockRecorder) UpdateProduct(ctx, product any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProduct", reflect.TypeOf((*MockProductRepository)(nil).UpdateProduct), ctx, product)
}
